apiVersion: v1
kind: ConfigMap
metadata:
  name: db-init-scripts
data:
  01_init.sql: |
    -- Создание баз данных
    CREATE DATABASE aidoc_auth_db;
    CREATE DATABASE aidoc_db;
    
    -- Предоставление прав
    GRANT ALL PRIVILEGES ON DATABASE aidoc_auth_db TO aidoc_user;
    GRANT ALL PRIVILEGES ON DATABASE aidoc_db TO aidoc_user;
    
    -- Создание схемы
    CREATE SCHEMA IF NOT EXISTS public;
    
    -- Создание таблицы ролей
    CREATE TABLE IF NOT EXISTS roles (
      role_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      role_name VARCHAR(50) NOT NULL UNIQUE,
      created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Создание таблицы пользователей
    CREATE TABLE IF NOT EXISTS users (
      user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
      email VARCHAR(255) NOT NULL UNIQUE,
      password_hash VARCHAR(255) NOT NULL,
      first_name VARCHAR(100),
      last_name VARCHAR(100),
      middle_name VARCHAR(100),
      phone_number VARCHAR(20),
      status VARCHAR(20) NOT NULL DEFAULT 'ACTIVE',
      created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
      updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
    );
    
    -- Создание таблицы связей пользователей и ролей
    CREATE TABLE IF NOT EXISTS user_roles (
      user_id UUID REFERENCES users(user_id) ON DELETE CASCADE,
      role_id UUID REFERENCES roles(role_id) ON DELETE CASCADE,
      created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
      PRIMARY KEY (user_id, role_id)
    );
    
    -- Создание триггерной функции для обновления updated_at
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
      NEW.updated_at = CURRENT_TIMESTAMP;
      RETURN NEW;
    END;
    $$ LANGUAGE 'plpgsql';
    
    -- Создание триггеров для обновления updated_at
    CREATE TRIGGER update_users_updated_at
      BEFORE UPDATE ON users
      FOR EACH ROW
      EXECUTE FUNCTION update_updated_at_column();
    
    CREATE TRIGGER update_roles_updated_at
      BEFORE UPDATE ON roles
      FOR EACH ROW
      EXECUTE FUNCTION update_updated_at_column();
  
  02_data.sql: |
    -- Вставка базовых ролей
    INSERT INTO roles (role_name) VALUES
      ('ROLE_USER'),
      ('ROLE_ADMIN'),
      ('ROLE_DOCTOR')
      ON CONFLICT (role_name) DO NOTHING;
    
    -- Добавление тестового админа
    INSERT INTO users (
      email,
      password_hash,
      first_name,
      last_name,
      status
    ) VALUES (
      'admin@example.com',
      '$2a$10$xn3LI/AjqicFYZFruSwve.277PhLg2kyMwk.MoMxYpvXknLzsef3u',
      'Admin',
      'Administrator',
      'ACTIVE'
    ) ON CONFLICT (email) DO NOTHING;
    
    -- Назначение роли админа
    INSERT INTO user_roles (
      user_id,
      role_id
    )
    SELECT
      u.user_id,
      r.role_id
    FROM users u
    CROSS JOIN roles r
    WHERE u.email = 'admin@example.com'
      AND r.role_name = 'ROLE_ADMIN'
      ON CONFLICT DO NOTHING;