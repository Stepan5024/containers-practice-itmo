server:
  port: 8080

spring:
  main:
    web-application-type: servlet
  # Конфигурация Cloud Gateway
  cloud:
    gateway:
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders:
              - Authorization
              - Content-Type
              - X-Requested-With
              - Accept
              - Origin
              - Access-Control-Request-Method
              - Access-Control-Request-Headers
            exposedHeaders:
              - Access-Control-Allow-Origin
              - Access-Control-Allow-Credentials
            allowCredentials: true
            maxAge: 3600

      # Конфигурация маршрутов
      routes:
        # Маршрут для сервиса аутентификации
        - id: auth-server
          uri: http://localhost:8081
          predicates:
            - Path=/auth/**
          filters:
            - StripPrefix=1
            - name: CircuitBreaker
              args:
                name: authService
                fallbackUri: forward:/fallback/auth

        # Маршрут для сервиса отчетов
        - id: report-generation-service
          uri: http://localhost:8082
          predicates:
            - Path=/reports/**
          filters:
            - name: CircuitBreaker
              args:
                name: reportService
                fallbackUri: forward:/fallback/reports

        # Маршрут для сервиса документов
        - id: document-service
          uri: http://localhost:8083
          predicates:
            - Path=/documents/**
          filters:
            - name: CircuitBreaker
              args:
                name: documentService
                fallbackUri: forward:/fallback/documents

# Конфигурация логирования
logging:
  level:
    root: INFO
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    org.springframework.cloud.gateway: DEBUG
    ru.aidoc: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# Конфигурация актуатора для мониторинга
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
  health:
    circuitbreakers:
      enabled: true

# Конфигурация Resilience4j для Circuit Breaker
resilience4j:
  circuitbreaker:
    instances:
      authService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
      reportService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
      documentService:
        registerHealthIndicator: true
        slidingWindowSize: 10
        minimumNumberOfCalls: 5
        permittedNumberOfCallsInHalfOpenState: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 5s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10