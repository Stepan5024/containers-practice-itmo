services:

  api-service:
    build: ./api-service
    container_name: api-service
    healthcheck:
      test: curl -f http://localhost:5000/version || exit 1
      interval: 5s
      timeout: 2s
      retries: 3
    env_file: .env
    ports:
      - 8080:5000
    depends_on:
      database:
        condition: service_healthy

  database:
    image: postgres:15.4-alpine
    container_name: database
    volumes:
      - ./db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: pg_isready -U  ${POSTGRES_USER} -d ${POSTGRES_DB}
      interval: 10s
      timeout: 3s
      retries: 3

  migrate:
    image: migrate/migrate
    container_name: migrate
    networks:
      - default_network
    volumes:
      - .:/migrations
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    command:
      - -path /migrations -database
      - postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}?sslmode=disable
      - up
    depends_on:
      database:
        condition: service_healthy

volumes:
  database:
    external: true

networks:
  default_network:
    external: true